[{"/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/index.js":"1","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/reportWebVitals.js":"2","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/App.js":"3","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Login.js":"4","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Register.js":"5","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Dashboard.js":"6","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Status.js":"7","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Risk.js":"8","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/ContactTrace.js":"9","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Connects.js":"10","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/CheckUser.js":"11"},{"size":660,"mtime":1607894054567,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1607894054567,"results":"14","hashOfConfig":"13"},{"size":3750,"mtime":1608019411985,"results":"15","hashOfConfig":"13"},{"size":2067,"mtime":1608020778006,"results":"16","hashOfConfig":"13"},{"size":1967,"mtime":1607894054566,"results":"17","hashOfConfig":"13"},{"size":3830,"mtime":1608029001775,"results":"18","hashOfConfig":"13"},{"size":1564,"mtime":1607937275733,"results":"19","hashOfConfig":"13"},{"size":3047,"mtime":1607937275733,"results":"20","hashOfConfig":"13"},{"size":5600,"mtime":1608029003642,"results":"21","hashOfConfig":"13"},{"size":3591,"mtime":1608027772967,"results":"22","hashOfConfig":"13"},{"size":6221,"mtime":1608028998083,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1jpyl7h",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"26"},"/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/index.js",[],["57","58"],"/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/reportWebVitals.js",[],"/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/App.js",["59"],"// import React, {useState, useEffect} from 'react';\n\n// function App() {\n//   const [users, setUsers] = useState(false);\n//   useEffect(() => {\n//     getUsers();\n//   }, []);\n//   function getUsers() {\n//     fetch('http://localhost:3001')\n//       .then(response => {\n//         return response.text();\n//       })\n//       .then(data => {\n//         setUsers(data);\n//       });\n//   }\n//   function createUser() {\n//     let username = prompt('Enter username');\n//     let password = prompt('Enter password');\n//     fetch('http://localhost:3001/users', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({username, password}),\n//     })\n//       .then(response => {\n//         return response.text();\n//       })\n//       .then(data => {\n//         alert(data);\n//         getUsers();\n//       });\n//   }\n//   // function deleteMerchant() {\n//   //   let id = prompt('Enter merchant id');\n//   //   fetch(`http://localhost:3001/merchants/${id}`, {\n//   //     method: 'DELETE',\n//   //   })\n//   //     .then(response => {\n//   //       return response.text();\n//   //     })\n//   //     .then(data => {\n//   //       alert(data);\n//   //       getMerchant();\n//   //     });\n//   // }\n//   return (\n//     <div>\n//       {users ? users : 'There is no user data available'}\n//       <br />\n//       <button onClick={createUser}>Add user</button>\n//       <br />\n//     </div>\n//   );\n// }\n// export default App;\n\nimport React, { Fragment, useState, useEffect } from \"react\";\n\n// import \"react-toastify/dist/ReactToastify.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\n// import { toast } from \"react-toastify\";\n\n//components\n\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Dashboard from \"./components/Dashboard\";\n\n// toast.configure();\nfunction App() {\n  // const checkAuthenticated = async () => {\n  //   try {\n  //     const res = await fetch(\"http://localhost:3001/authentication/verify\", {\n  //       method: \"POST\",\n  //       headers: { jwt_token: localStorage.token }\n  //     });\n\n  //     const parseRes = await res.json();\n\n  //     parseRes === true ? setIsAuthenticated(true) : setIsAuthenticated(false);\n  //   } catch (err) {\n  //     console.error(err.message);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   checkAuthenticated();\n  // }, []);\n\n  const [isAuthenticated, setIsAuthenticated] = useState(localStorage.getItem(\"token\") !== null);\n\n  const setAuth = boolean => {\n    setIsAuthenticated(boolean);\n  };\n\n  return (\n    <Fragment>\n      <Router>\n        <div className=\"container\">\n          <Switch>\n            <Route\n              exact\n              path=\"/login\"\n              render={props =>\n                !isAuthenticated ? (\n                  <Login {...props} setAuth={setAuth} />\n                ) : (\n                  <Redirect to=\"/dashboard\" />\n                )\n              }\n            />\n            <Route\n              exact\n              path=\"/register\"\n              render={props =>\n                !isAuthenticated ? (\n                  <Register {...props} setAuth={setAuth} />\n                ) : (\n                  <Redirect to=\"/dashboard\" />\n                )\n              }\n            />\n            <Route\n              exact\n              path=\"/dashboard\"\n              render={props =>\n                isAuthenticated ? (\n                  <Dashboard {...props} setAuth={setAuth} />\n                ) : (\n                  <Redirect to=\"/login\" />\n                )\n              }\n            />\n          </Switch>\n        </div>\n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Login.js",["60","61"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\n// import { toast } from \"react-toastify\";\n\nconst Login = ({ setAuth }) => {\n  const [inputs, setInputs] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const { username, password } = inputs;\n\n  const onChange = e =>\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n\n  const onSubmitForm = async e => {\n    e.preventDefault();\n    try {\n      const body = { username, password };\n      const response = await fetch(\n        \"http://localhost:3001/authentication/login\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        }\n      );\n      // const parseRes = await response.json();\n      // setAuth(true);\n      if (response.status == 200) {\n        const parseRes = await response.json();\n        setAuth(true);\n        localStorage.setItem(\"token\", parseRes.username);\n      }\n      // const parseRes = await response.json();\n      // console.log(parseRes);\n\n      // if (parseRes.jwtToken) {\n      //   localStorage.setItem(\"token\", parseRes.jwtToken);\n      //   setAuth(true);\n      //   toast.success(\"Logged in Successfully\");\n      // } else {\n      //   setAuth(false);\n      //   toast.error(parseRes);\n      // }\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return (\n    <Fragment>\n      <h1 className=\"mt-5 text-center\">Login</h1>\n      <form onSubmit={onSubmitForm}>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          placeholder=\"username\"\n          onChange={e => onChange(e)}\n          className=\"form-control my-3\"\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          placeholder=\"password\"\n          onChange={e => onChange(e)}\n          className=\"form-control my-3\"\n        />\n        <button className=\"btn btn-success btn-block\">Submit</button>\n      </form>\n      <Link to=\"/register\">register</Link>\n    </Fragment>\n  );\n};\n\nexport default Login;","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Register.js",["62","63"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n// import { toast } from \"react-toastify\";\n\nconst Register = ({ setAuth }) => {\n  const [inputs, setInputs] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const { username, password } = inputs;\n\n  const onChange = e =>\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n\n  const onSubmitForm = async e => {\n    e.preventDefault();\n    try {\n      const body = { username, password };\n      const response = await fetch(\n        \"http://localhost:3001/authentication/register\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        }\n      );\n      // console.log(parseRes);\n      if (response.status == 200) {\n        const parseRes = await response.json();\n        setAuth(true);\n        localStorage.setItem(\"token\", parseRes.username);\n      }\n      // if (parseRes.jwtToken) {\n      //   setAuth(true);\n      //   // toast.success(\"Register Successfully\");\n      // } else {\n      //   setAuth(false);\n      //   // toast.error(parseRes);\n      // }\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return (\n    <Fragment>\n      <h1 className=\"mt-5 text-center\">Register</h1>\n      <form onSubmit={onSubmitForm}>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          placeholder=\"username\"\n          onChange={e => onChange(e)}\n          className=\"form-control my-3\"\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          placeholder=\"password\"\n          onChange={e => onChange(e)}\n          className=\"form-control my-3\"\n        />\n        <button className=\"btn btn-success btn-block\">Submit</button>\n      </form>\n      <Link to=\"/login\">login</Link>\n    </Fragment>\n  );\n};\n\nexport default Register;","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Dashboard.js",["64"],"import React, { useEffect, useState } from \"react\";\nimport Status from \"./Status\";\nimport Risk from \"./Risk\";\nimport Connects from \"./Connects\";\n// import { parse } from \"ipaddr.js\";\nimport ContactTrace from \"./ContactTrace\";\nimport CheckUser from \"./CheckUser\";\n// import { toast } from \"react-toastify\";\n\nconst Dashboard = ({ setAuth }) => {\n  const [name, setName] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [risk, setRisk] = useState(\"\");\n  const [connects, setConnects] = useState(\"\");\n  //const [traces, setContactTrace] = useState(\"\");\n\n  const getProfile = async () => {\n    try {\n      const res = await fetch(\n        \"http://localhost:3001/authentication/dashboard\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({username: localStorage.getItem(\"token\")})\n        }\n      );\n      \n      const parseData = await res.json();\n      // console.log(parseData);\n      setName(parseData.username);\n      setStatus(parseData.status);\n      setRisk(parseData.risk);\n      //setContactTrace(parseData.username);\n      //setContactTrace(parseData.ContactTrace);\n    } catch (err) {\n      console.error(err.message);\n    }\n    try {\n      const res = await fetch(\n        \"http://localhost:3001/other/getAllConnections\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({user1: localStorage.getItem(\"token\"), homeuser: localStorage.getItem(\"token\"), primuser: localStorage.getItem(\"token\")})\n        }\n      );\n      \n      const parseData = await res.json();\n      let x = compileDataArr(parseData);\n      // console.log(parseData);\n      //console.log(x);\n      // let obj = JSON.stringify(parseData);\n      // console.log(obj);\n      // console.log(parseData);\n      // console.log(obj.user2);\n      // alert(obj.user2);\n      setConnects(x);\n    } catch (err) {\n      console.error(err.message);\n    }\n\n\n    \n  };\n\n  // const Trace = async e => {\n  //   e.preventDefault();\n  //   let notif = null;\n  //   try {\n  //     notif = contactTrace(localStorage.getItem(\"token\"));\n  //     setContactTrace(notif);\n  //   //   toast.success(\"Logout successfully\");\n  //   } catch (err) {\n  //     console.error(err.message);\n  //   }\n  // };\n\n  const logout = async e => {\n    e.preventDefault();\n    try {\n      localStorage.removeItem(\"token\");\n      setAuth(false);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getProfile();\n  }, []);\n  \nfunction compileDataArr(data) {\n  let retArr = [];\n  let i;\n  let count = Object.keys(data).length;\n  for (i = 0; i < count; i++) {\n      retArr.push((data[i].user2) + \", \");\n      }\n  return retArr;\n}\nconst traces = localStorage.getItem(\"token\");\n\nreturn (\n    <div>\n      <h1 className=\"mt-5\"><b>Dashboard</b></h1>\n      <br></br>\n      <h2>Welcome, {name}!</h2>\n      <br></br>\n      <h2>Based off of current symptoms and exposure, this is your risk of COVID: {risk} </h2>\n      <h3>If you have some risk, consider getting tested!</h3>\n      <br></br>\n      <h2>Current COVID Status: {status}</h2>\n      <br></br>\n      <h2>Active Contacts: {connects}</h2>\n      <br></br>\n      <ContactTrace updateContactTrace = {traces}/>\n      <br></br>\n      <CheckUser updateCheckUser/>\n      <br></br>\n      <Risk updateRisk = {setRisk} risk = {risk}/>\n      <Status updateStatus = {setStatus} status = {status}/>\n      <Connects updateConnects = {setConnects} connects = {connects}/>\n      <br></br>\n      {/* <button onClick={e => Trace(e)} className=\"btn btn-primary\"></button> */}\n      <button onClick={e => logout(e)} className=\"btn btn-primary\">\n        Logout\n      </button>\n    </div>\n  );\n};\n\nexport default Dashboard;","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Status.js",["65","66"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\n// import { toast } from \"react-toastify\";\n\nconst Status = ({updateStatus, status}) => {\nconst [myStatus, updateMyStatus] = useState(status)\nconst onSubmitForm = async e => {\n    e.preventDefault();\n    try {\n      const body = { username: localStorage.getItem(\"token\"), status: myStatus };\n      const response = await fetch(\n        \"http://localhost:3001/authentication/status\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        }\n      );\n      // const parseRes = await response.json();\n      // setAuth(true);\n      if (response.status === 200) {\n        updateStatus(myStatus);\n      }\n      // const parseRes = await response.json();\n      // console.log(parseRes);\n\n      // if (parseRes.jwtToken) {\n      //   localStorage.setItem(\"token\", parseRes.jwtToken);\n      //   setAuth(true);\n      //   toast.success(\"Logged in Successfully\");\n      // } else {\n      //   setAuth(false);\n      //   toast.error(parseRes);\n      // }\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return (\n    <Fragment>\n      <h1 className=\"mt-5 text-center\">Update COVID Status</h1>\n      <form onSubmit={onSubmitForm}>\n        <input\n          type=\"radio\"\n          checked = {myStatus === \"positive\"}\n          name=\"positive\"\n          value=\"positive\"\n          onChange={e => updateMyStatus(\"positive\")}\n          className=\"form-control my-3\"\n        /> Positive\n        <input\n          type=\"radio\"\n          checked = {myStatus === \"negative\"}\n          name=\"negative\"\n          value=\"negative\"\n          onChange={e => updateMyStatus(\"negative\")}\n          className=\"form-control my-3\"\n        /> Negative\n        <button className=\"btn btn-success btn-block\">Submit</button>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default Status;","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Risk.js",["67","68"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\n// import { toast } from \"react-toastify\";\n\nconst Risk = ({updateRisk, risk}) => {\nconst [myRisk, updateMyRisk] = useState(risk)\nconst onSubmitForm = async e => {\n    e.preventDefault();\n    try {\n      const body = { username: localStorage.getItem(\"token\"), risk: myRisk };\n      const response = await fetch(\n        \"http://localhost:3001/authentication/risk\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        }\n      );\n      // const parseRes = await response.json();\n      // setAuth(true);\n      if (response.status === 200) {\n        updateRisk(myRisk);\n      }\n      // const parseRes = await response.json();\n      // console.log(parseRes);\n\n      // if (parseRes.jwtToken) {\n      //   localStorage.setItem(\"token\", parseRes.jwtToken);\n      //   setAuth(true);\n      //   toast.success(\"Logged in Successfully\");\n      // } else {\n      //   setAuth(false);\n      //   toast.error(parseRes);\n      // }\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return (\n    <Fragment>\n      <h3 className=\"mt-5\">Log your current symptoms!</h3>\n      <form onSubmit={onSubmitForm}>\n        <input\n          type=\"checkbox\"\n          checked = {myRisk === \"some \"}\n          name=\"fever\"\n          value=\"fever\"\n          onChange={e => updateMyRisk(\"some \")}\n          className=\"form-control my-3\"\n        /> Feel like you have had a fever?\n        <input\n          type=\"checkbox\"\n          checked = {myRisk === \"some\"}\n          name=\"chills\"\n          value=\"chills\"\n          onChange={e => updateMyRisk(\"some\")}\n          className=\"form-control my-3\"\n        /> Chills?\n        <input\n          type=\"checkbox\"\n          checked = {myRisk === \"low\"}\n          name=\"low\"\n          value=\"low\"\n          onChange={e => updateMyRisk(\"low\")}\n          className=\"form-control my-3\"\n        /> None of the above\n        <button className=\"btn btn-success btn-block\">Submit</button>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default Risk;","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/ContactTrace.js",["69","70","71","72","73","74","75","76"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nfunction Connection(userOne, userTwo, userTwoStatus) {\n  this.user1 = userOne;\n  this.user2 = userTwo;\n  this.user2status = userTwoStatus;\n}\n\nfunction compileDataArr(data) { //take second parameter x username\n  let retArr = [];\n  let i;\n  let count = Object.keys(data).length;\n  for (i = 0; i < count; i++) {\n      retArr.push(new Connection(data[i].user1, data[i].user2, data[i].user2status));\n      \n      }\n    return retArr;\n}\n\n\n///GET CACHE\n\nconst getCache = async() => {\n  // function getCache(){\n    try {\n      //let u2status = \"positive\"; // change back to positive\n      let x;\n      const res = await fetch('http://localhost:3001/other/cacheDatabase', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({}),\n      });\n\n      const r = await res.json();\n      x = compileDataArr(r);\n      console.log(x);\n      return x;\n    }\n    catch (err) {\n       console.error(err.message);\n    }\n}\n\n\n\n  function updateRisk(userUp) { //this updates to positive\n    let user = userUp;\n    let riskStatus = 'some';\n    fetch('http://localhost:3001/authentication/risk', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({username : user, risk : riskStatus}),\n    })\n    .then(data => {\n      //console.log(data);\n      //getUsers();\n    });\n  }\n\n\n\n  function networkStatus(num, pos) {\n    let str;\n    if (num == 0) {\n      str = \"Wow! You have 0 connections. Great job, you are being very safe!\";\n    }\n    else if (num < 20 && num > 0) {\n      str = \"Your network status is yellow! You have \" + num + \" connections to the tertiary level. You're being relatively safe.\";\n    }\n    else if (num >= 20 && num < 40) {\n      str = \"  Your network status is orange! You have \" + num + \" connections to the tertiary level. You're being pretty unsafe.\";\n    }\n    else {\n      str = \" Your network status is red! You have \" + num + \" connections to the tertiary level.\";\n    }\n    if (pos === 0) {\n      str += \" However, you have not come into contact with a positive user.\";\n    }\n    return str;\n  }\n  \n\n\n  async function contactTrace(username){\n      let user = username;\n      console.log(user);\n      let cache = await getCache();\n      console.log(\"flag\");\n      console.log(cache);\n      let primary = [];\n      let secondary = [];\n      let notifications = [];\n      let count = 0;\n      let riskCheck = 0;\n      let i;\n      let j;\n      \n    //notifications.push(\"You came in contact with \" + primary[i] + \" who has tested positive for covid. You need to get tested!\");\n\n      for (i = 0; i < cache.length; i++) { //set up primary connections\n        //console.log()\n        if(cache[i].user1 === user && cache[i].user2 != user) { //all conn where main user is user1\n          primary.push(cache[i].user2);\n          count++;\n          if (cache[i].user2status === \"positive\") {\n            notifications.push(\"You came in primary contact with \" + cache[i].user2 + \" who has tested positive for covid. You need to get tested!\");\n            riskCheck = 1;\n          }\n        }\n        console.log(primary);\n        \n      }\n      for (i = 0; i < cache.length; i++) { //set up secondary connections\n        for (j = 0; j < primary.length; j++) { //all conn where primary connection is user1\n          if(cache[i].user1 === primary[j] && primary[j] != user && cache[i].user2 != user) {\n            secondary.push(cache[i].user2);\n            count++;\n            if (cache[i].user2status === \"positive\") {\n              notifications.push(\"You came in secondary contact with \" + cache[i].user2 + \" who has tested positive for covid. You need to get tested!\");\n              riskCheck = 1;\n            }\n          }\n        }\n      }\n\n      for (i = 0; i < cache.length; i++) { //set up tertiary connections\n        for (j = 0; j < secondary.length; j++) { \n          if(cache[i].user1 === secondary[j] && secondary[j] != user && cache[i].user2 != user) {\n            count++;\n            if (cache[i].user2status === \"positive\") {\n              notifications.push(\"You came in tertiary contact with \" + cache[i].user2 + \" who has tested positive for covid. You need to get tested!\");\n              riskCheck = 1;\n            }\n            j = secondary.length; //removes chance of dupes\n          }\n        }\n      }\n\n      \n      if (riskCheck === 1) {\n        updateRisk(user);\n      }\n      //console.log(networkStatus(count, notifications.length));\n      notifications.unshift(networkStatus(count, notifications.length));\n      console.log(\"flag-notifications\");\n      console.log(notifications);\n      return notifications;\n  }\n\n  //look at documentation to set state to notif\n\n  const ContactTrace = ({updateContactTrace}) => {\n    const [notif, setNotif] = useState([]);\n    //const [retDat, setRetDat] = useState([]);\n      const onSubmitForm = async e => {\n          e.preventDefault();\n          const ct = await contactTrace(updateContactTrace);\n          setNotif(ct);\n          console.log(ct);\n          console.log(\"flag-notif\");\n          console.log(notif);\n      }\n    return (\n      <Fragment>\n        <div className = \"CT\">\n          <div className = \"populated\">\n            {notif.map((x) => <li key = \"{x}\">{x}</li>)}\n          </div>\n          <button className = \"btn btn-success btn-block\" onClick = {onSubmitForm}> Contact Trace! </button>\n        </div>\n      </Fragment>\n    )\n    }\n\n    export default ContactTrace;","/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/Connects.js",["77","78","79","80","81"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\n// import { toast } from \"react-toastify\";\n\n//refresh doesn't work\n\nconst Connects = (updateConnects, connects) => {\n    // const [myConnects, updateMyConnects] = useState(connects)\n    const [inputs, setInputs] = useState({\n        user1: \"\",\n        user2: \"\",\n        user3: \"\"\n      });\n    const { user1, user2, user3 } = inputs;\n\n    const onChange = e =>\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n\nconst onSubmitFormA = async e => {\n    e.preventDefault();\n    try {\n        const body = { user1: localStorage.getItem(\"token\"), user2 };\n        const response = await fetch(\n          \"http://localhost:3001/other/add\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }\n        );\n        // if (response.status === 200) {\n        //   updateConnects(myConnects);\n        // }\n      } catch (err) {\n        console.error(err.message);\n      }\n  };\n\n  const onSubmitFormB = async e => {\n    e.preventDefault();\n    try {\n        const body = { user1: localStorage.getItem(\"token\"), user2, user3 };\n        const response = await fetch(\n          \"http://localhost:3001/other/edit\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }\n        );\n        if (response.status === 200) {\n          updateConnects(connects);\n        }\n      } catch (err) {\n        console.error(err.message);\n      }\n  };\n\n  const onSubmitFormC = async e => {\n    e.preventDefault();\n    try {\n        const body = { user1: localStorage.getItem(\"token\"), user2 };\n        const response = await fetch(\n          \"http://localhost:3001/other/delete\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          }\n        );\n        // if (response.status === 200) {\n        //   updateConnects(myConnects);\n        // }\n      } catch (err) {\n        console.error(err.message);\n      }\n  };\n\n  return (\n    <Fragment>\n    <h3 className=\"mt-5\">Add Contact</h3>\n    <form onSubmit={onSubmitFormA}>\n      <input\n        type=\"text\"\n        name=\"user2\"\n        value={user2}\n        placeholder=\"username\"\n        onChange={e => onChange(e)}\n        className=\"form-control my-3\"\n      />\n      <button className=\"btn btn-success btn-block\">Submit</button>\n    </form>\n    <h3 className=\"mt-5\">Edit Contact</h3>\n    <form onSubmit={onSubmitFormB}>\n      <input\n        type=\"text\"\n        name=\"user2\"\n        value={user2}\n        placeholder=\"old username\"\n        onChange={e => onChange(e)}\n        className=\"form-control my-3\"\n      />\n        <input\n        type=\"text\"\n        name=\"user3\"\n        value={user3}\n        placeholder=\"new username\"\n        onChange={e => onChange(e)}\n        className=\"form-control my-3\"\n      />\n      <button className=\"btn btn-success btn-block\">Submit</button>\n    </form>\n    <h3 className=\"mt-5\">Delete Contact</h3>\n    <form onSubmit={onSubmitFormC}>\n      <input\n        type=\"text\"\n        name=\"user2\"\n        value={user2}\n        placeholder=\"username\"\n        onChange={e => onChange(e)}\n        className=\"form-control my-3\"\n      />\n      <button className=\"btn btn-success btn-block\">Submit</button>\n    </form>\n  </Fragment>\n  );\n};\n\nexport default Connects;",["82","83"],"/Users/justincomputer/Documents/GitHub/creativeproject-mod7-474190-475569/client/src/components/CheckUser.js",["84","85","86","87","88","89","90","91"],"import React, { Fragment, useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nfunction Connection(userOne, userTwo, userTwoStatus) {\n  this.user1 = userOne;\n  this.user2 = userTwo;\n  this.user2status = userTwoStatus;\n}\n\nfunction compileDataArr(data) { \n  let retArr = [];\n  let i;\n  let count = Object.keys(data).length;\n  for (i = 0; i < count; i++) {\n      retArr.push(new Connection(data[i].user1, data[i].user2, data[i].user2status));\n      \n      }\n    return retArr;\n}\n\nfunction compileStatus(data){\n    let retStr = data.status;\n    return retStr;\n}\n\n\n///GET CACHE\n\nconst getCache = async() => {\n    try {\n      let x;\n      const res = await fetch('http://localhost:3001/other/cacheDatabase', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({}),\n      });\n\n      const r = await res.json();\n      x = compileDataArr(r);\n      console.log(x);\n      return x;\n    }\n    catch (err) {\n       console.error(err.message);\n    }\n}\n\nconst getStatus = async(username) => {\n    try {\n      let x;\n        let user = username\n      const res = await fetch('http://localhost:3001/authentication/getstatus', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({username : user}),\n      });\n\n      const r = await res.json();\n      console.log(r);\n      x = compileStatus(r);\n      return x;\n    }\n    catch (err) {\n       console.error(err.message);\n    }\n}\n\n  function networkStatus(num) {\n    let str;\n    if (num == 0) {\n      str = \"Isolated\";\n    }\n    else if (num < 20 && num > 0) {\n      str = \"Yellow\";\n    }\n    else if (num >= 20 && num < 40) {\n      str = \"Orange\";\n    }\n    else {\n      str = \"Red\";\n    }\n    return str;\n  }\n\n  function positiveContact(user) {\n      let str = user + \" has come into contact with a COVID positive user. They are extremely unsafe to see.\";\n      return str;\n  }\n\n  async function checkUser(username){\n      let user = username;\n      let status = await getStatus(user);\n      let notifications = [];\n      if (status === \"positive\") {\n          notifications.push(user + \" is COVID positive. Under no condition should you see them.\")\n      }\n      else {\n        let cache = await getCache();\n        let primary = [];\n        let secondary = [];\n        let count = 0;\n        let i;\n        let j;\n            \n        for (i = 0; i < cache.length; i++) { //set up primary connections\n            //console.log()\n            if(cache[i].user1 === user && cache[i].user2 != user) { //all conn where main user is user1\n            primary.push(cache[i].user2);\n            count++;\n            if (cache[i].user2status === \"positive\") {\n                notifications.push(\"filler\");\n            }\n            }\n            \n        }\n        for (i = 0; i < cache.length; i++) { \n            for (j = 0; j < primary.length; j++) { \n            if(cache[i].user1 === primary[j] && primary[j] != user && cache[i].user2 != user) {\n                secondary.push(cache[i].user2);\n                count++;\n                if (cache[i].user2status === \"positive\") {\n                notifications.push(\"filler\");\n                }\n            }\n            }\n        }\n\n        for (i = 0; i < cache.length; i++) { //set up tertiary connections\n            for (j = 0; j < secondary.length; j++) { \n            if(cache[i].user1 === secondary[j] && secondary[j] != user && cache[i].user2 != user) {\n                count++;\n                if (cache[i].user2status === \"positive\") {\n                notifications.push(\"filler\");\n                }\n                j = secondary.length; //removes chance of dupes\n            }\n            }\n        }\n        let str;\n        if (notifications.length > 0) {\n            notifications.length = 0; //resets notifs to remove fillers\n            str = positiveContact(user);\n        }\n        else {\n            let network = networkStatus(count);\n            if (network === \"Isolated\") {\n                str = user + \" has no contacts with positive users and has no connections. They are very safe to see.\";\n            }\n            else if (network === \"Yellow\") {\n                str = user + \" has no contacts with positive users and has a relatively small (yellow status) network of connections. They are fairly safe to see.\";\n            }\n            else if (network === \"Orange\") {\n                str = user + \" has no contacts with positive users and has a relatively extensive (orange status) network of connection. They are probably safe to see.\";\n            }\n            else if (network === \"Red\"){\n                str = user + \" has no contacts with positive users but has a very extensive (red status) network of connection. They are probably not safe to see.\";\n            }\n        }\n        notifications.length = 0; \n        notifications.push(str);\n    } \n    return notifications;\n  }\n\n\n  \n  const CheckUser = () => {\n    const [notif, setNotif] = useState([]);\n    const [inputs, setInputs] = useState({\n      updateCheckUser: \"\"\n    });\n    \n    const {updateCheckUser} = inputs;\n    \n    const onChange = e =>\n    setInputs({ ...inputs, [e.target.name]: e.target.value });\n\n    const onSubmitForm = async e => {\n        e.preventDefault();\n        const cu = await checkUser(updateCheckUser);\n        setNotif(cu);\n    }\n    return (\n      //html here\n      <Fragment>\n        <div className = \"CU\">\n          <div className = \"populated\">\n            {notif.map((x) => <li key = \"{x}\">{x}</li>)}\n          </div>\n          {/* <button className = \"btn btn-success btn-block\" onClick = {onSubmitForm}> Check User! </button> */}\n          <form onSubmit={onSubmitForm}>\n            <input\n              type=\"text\"\n              name=\"updateCheckUser\"\n              value={updateCheckUser}\n              placeholder=\"username\"\n              onChange={e => onChange(e)}\n              className=\"form-control my-3\"\n            />\n            <button className=\"btn btn-success btn-block\">Check User Contact Safety!</button>\n          </form>\n        </div>\n        \n      </Fragment>\n    )\n    }\n\n    export default CheckUser;\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":59,"column":37,"nodeType":"98","messageId":"99","endLine":59,"endColumn":46},{"ruleId":"96","severity":1,"message":"100","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":33,"column":27,"nodeType":"103","messageId":"104","endLine":33,"endColumn":29},{"ruleId":"96","severity":1,"message":"100","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":31,"column":27,"nodeType":"103","messageId":"104","endLine":31,"endColumn":29},{"ruleId":"105","severity":1,"message":"106","line":94,"column":6,"nodeType":"107","endLine":94,"endColumn":8,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":14},{"ruleId":"96","severity":1,"message":"100","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"96","severity":1,"message":"109","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":14},{"ruleId":"96","severity":1,"message":"100","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"96","severity":1,"message":"109","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":14},{"ruleId":"96","severity":1,"message":"100","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":69,"column":13,"nodeType":"103","messageId":"104","endLine":69,"endColumn":15},{"ruleId":"101","severity":1,"message":"110","line":107,"column":54,"nodeType":"103","messageId":"104","endLine":107,"endColumn":56},{"ruleId":"101","severity":1,"message":"110","line":120,"column":58,"nodeType":"103","messageId":"104","endLine":120,"endColumn":60},{"ruleId":"101","severity":1,"message":"110","line":120,"column":84,"nodeType":"103","messageId":"104","endLine":120,"endColumn":86},{"ruleId":"101","severity":1,"message":"110","line":133,"column":62,"nodeType":"103","messageId":"104","endLine":133,"endColumn":64},{"ruleId":"101","severity":1,"message":"110","line":133,"column":88,"nodeType":"103","messageId":"104","endLine":133,"endColumn":90},{"ruleId":"96","severity":1,"message":"109","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":14},{"ruleId":"96","severity":1,"message":"100","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"96","severity":1,"message":"111","line":15,"column":13,"nodeType":"98","messageId":"99","endLine":15,"endColumn":18},{"ruleId":"96","severity":1,"message":"112","line":24,"column":15,"nodeType":"98","messageId":"99","endLine":24,"endColumn":23},{"ruleId":"96","severity":1,"message":"112","line":68,"column":15,"nodeType":"98","messageId":"99","endLine":68,"endColumn":23},{"ruleId":"92","replacedBy":"113"},{"ruleId":"94","replacedBy":"114"},{"ruleId":"96","severity":1,"message":"109","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":14},{"ruleId":"96","severity":1,"message":"100","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":74,"column":13,"nodeType":"103","messageId":"104","endLine":74,"endColumn":15},{"ruleId":"101","severity":1,"message":"110","line":111,"column":58,"nodeType":"103","messageId":"104","endLine":111,"endColumn":60},{"ruleId":"101","severity":1,"message":"110","line":122,"column":60,"nodeType":"103","messageId":"104","endLine":122,"endColumn":62},{"ruleId":"101","severity":1,"message":"110","line":122,"column":86,"nodeType":"103","messageId":"104","endLine":122,"endColumn":88},{"ruleId":"101","severity":1,"message":"110","line":134,"column":64,"nodeType":"103","messageId":"104","endLine":134,"endColumn":66},{"ruleId":"101","severity":1,"message":"110","line":134,"column":90,"nodeType":"103","messageId":"104","endLine":134,"endColumn":92},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getProfile'. Either include it or remove the dependency array.","ArrayExpression",["117"],"'Link' is defined but never used.","Expected '!==' and instead saw '!='.","'user1' is assigned a value but never used.","'response' is assigned a value but never used.",["115"],["116"],"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [getProfile]",{"range":"120","text":"121"},[2600,2602],"[getProfile]"]